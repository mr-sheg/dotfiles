## Section : Theming
  # Oh My Posh
  eval "$(oh-my-posh init zsh --config ~/.config/ohmyposh/void.toml)"
  # eval "$(oh-my-posh init zsh --config ~/.config/ohmyposh/themes/clean-detailed.omp.json)"

## Section : Zinit plugin
  # Set the directory we want to store zinit and plugins
  ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

  # Download Zinit, if it's not there yet
  if [ ! -d "$ZINIT_HOME" ]; then
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
  fi

  # Source/Load zinit
  source "${ZINIT_HOME}/zinit.zsh"

  # Add in zsh plugins
  zinit light zsh-users/zsh-syntax-highlighting
  zinit light zsh-users/zsh-completions
  zinit light zsh-users/zsh-autosuggestions
  zinit light Aloxaf/fzf-tab

  # Add in snippets
  zinit snippet OMZP::git
  zinit snippet OMZP::sudo
  zinit snippet OMZP::archlinux
  zinit snippet OMZP::aws
  zinit snippet OMZP::kubectl
  zinit snippet OMZP::kubectx
  zinit snippet OMZP::command-not-found

  # Load completions
  autoload -Uz compinit && compinit

  zinit cdreplay -q

## Section : Keybinds
  # Use emacs key bindings
    bindkey -e

  # [PageUp] - Up a line of history
    if [[ -n "${terminfo[kpp]}" ]]; then
      bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
      bindkey -M viins "${terminfo[kpp]}" up-line-or-history
      bindkey -M vicmd "${terminfo[kpp]}" up-line-or-history
    fi

  # [PageDown] - Down a line of history
    if [[ -n "${terminfo[knp]}" ]]; then
      bindkey -M emacs "${terminfo[knp]}" down-line-or-history
      bindkey -M viins "${terminfo[knp]}" down-line-or-history
      bindkey -M vicmd "${terminfo[knp]}" down-line-or-history
    fi

  # Start typing + [Up-Arrow] - fuzzy find history forward
    if [[ -n "${terminfo[kcuu1]}" ]]; then
      autoload -U up-line-or-beginning-search
      zle -N up-line-or-beginning-search

      bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
      bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
      bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
    fi

  # Start typing + [Down-Arrow] - fuzzy find history backward
    if [[ -n "${terminfo[kcud1]}" ]]; then
      autoload -U down-line-or-beginning-search
      zle -N down-line-or-beginning-search

      bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
      bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
      bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
    fi

  # [Home] - Go to beginning of line
    if [[ -n "${terminfo[khome]}" ]]; then
      bindkey -M emacs "${terminfo[khome]}" beginning-of-line
      bindkey -M viins "${terminfo[khome]}" beginning-of-line
      bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
    fi

  # [End] - Go to end of line
    if [[ -n "${terminfo[kend]}" ]]; then
      bindkey -M emacs "${terminfo[kend]}"  end-of-line
      bindkey -M viins "${terminfo[kend]}"  end-of-line
      bindkey -M vicmd "${terminfo[kend]}"  end-of-line
    fi

  # [Shift-Tab] - move through the completion menu backwards
    if [[ -n "${terminfo[kcbt]}" ]]; then
      bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
      bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
      bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
    fi

  # [Backspace] - delete backward
    bindkey -M emacs '^?' backward-delete-char
    bindkey -M viins '^?' backward-delete-char
    bindkey -M vicmd '^?' backward-delete-char

  # [Delete] - delete forward
    if [[ -n "${terminfo[kdch1]}" ]]; then
      bindkey -M emacs "${terminfo[kdch1]}" delete-char
      bindkey -M viins "${terminfo[kdch1]}" delete-char
      bindkey -M vicmd "${terminfo[kdch1]}" delete-char
    else
      bindkey -M emacs "^[[3~" delete-char
      bindkey -M viins "^[[3~" delete-char
      bindkey -M vicmd "^[[3~" delete-char

      bindkey -M emacs "^[3;5~" delete-char
      bindkey -M viins "^[3;5~" delete-char
      bindkey -M vicmd "^[3;5~" delete-char
    fi

    typeset -g -A key
    if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
      autoload -Uz add-zle-hook-widget
      function zle_application_mode_start { echoti smkx }
      function zle_application_mode_stop { echoti rmkx }
      add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
      add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
    fi

  # Control Left - go back a word
    key[Control-Left]="${terminfo[kLFT5]}"
    if [[ -n "${key[Control-Left]}"  ]]; then
      bindkey -M emacs "${key[Control-Left]}"  backward-word
      bindkey -M viins "${key[Control-Left]}"  backward-word
      bindkey -M vicmd "${key[Control-Left]}"  backward-word
    fi

  # Control Right - go forward a word
    key[Control-Right]="${terminfo[kRIT5]}"
    if [[ -n "${key[Control-Right]}" ]]; then
      bindkey -M emacs "${key[Control-Right]}" forward-word
      bindkey -M viins "${key[Control-Right]}" forward-word
      bindkey -M vicmd "${key[Control-Right]}" forward-word
    fi
  # Control Backspace - Delete previous word
    bindkey '^H' backward-kill-word

## Section : History
  HISTFILE=~/.zhistory
  HISTSIZE=50000
  SAVEHIST=$HISTSIZE
  HISTDUP=erase
  setopt appendhistory
  setopt sharehistory
  setopt hist_ignore_space
  setopt hist_ignore_all_dups
  setopt hist_save_no_dups
  setopt hist_ignore_dups
  setopt hist_find_no_dups

## Section : Completion styling
  zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
  zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
  zstyle ':completion:*' menu no
  zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
  zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

## Section : Aliases
  # From dreamsofautonomy's .zshrc
    alias ls='ls --color'
    alias vim='nvim'
    alias c='clear'
  
  # From Garuda's default .zshrc
    alias grubup="sudo update-grub"
    alias fixpacman="sudo rm /var/lib/pacman/db.lck"
    alias tarnow='tar -acf '
    alias untar='tar -zxvf '
    alias wget='wget -c '
    alias rmpkg="sudo pacman -Rdd"
    alias psmem='ps auxf | sort -nr -k 4'
    alias psmem10='ps auxf | sort -nr -k 4 | head -10'
    alias ..='cd ..'
    alias ...='cd ../..'
    alias ....='cd ../../..'
    alias .....='cd ../../../..'
    alias ......='cd ../../../../..'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias hw='hwinfo --short'                                   # Hardware Info
    alias big="expac -H M '%m\t%n' | sort -h | nl"              # Sort installed packages according to size in MB (expac must be installed)
    alias gitpkg='pacman -Q | grep -i "\-git" | wc -l'			# List amount of -git packages

    # Get fastest mirrors 
    alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist" 
    alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist" 
    alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist" 
    alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist" 

    # Replace yay with paru if installed
    [ ! -x /usr/bin/yay ] && [ -x /usr/bin/paru ] && alias yay='paru'

  # Custom aliases
    alias jpl='jupyter lab'
    alias upd="update --skip-mirrorlist"

## Section : Shell integrations
  eval "$(fzf --zsh)"
  eval "$(zoxide init --cmd cd zsh)"
  eval $(thefuck --alias)

## Section : Personal
  # Python default environment
    source ~/python/cobra/bin/activate

  # Clear console post-init
    # eval clear
